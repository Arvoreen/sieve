<?xml version="1.0" encoding="UTF-8"?>
<bindings
    xmlns="http://www.mozilla.org/xbl" 
    xmlns:html="http://www.w3.org/1999/xhtml" 
    xmlns:xbl="http://www.mozilla.org/xbl"	
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  
  <binding id="SivDropBox">
    <content>
      <children/>
    </content>
    <implementation>
      
      <constructor>
        <![CDATA[
        
        this.init = function() {
          if (this.hasAttribute("sivAccepts"))
            this.sivFlavour = this.getAttribute("sivAccepts");
          else 
            this.sivFlavour = "sieve/action";
        
          if (this.hasAttribute("sivSiblingId"))
            this.sivSiblingId = this.getAttribute("sivSiblingId");
          else
            this.sivSiblingId = null;
          
          if (this.hasAttribute("sivParentId"))
            this.sivParentId = this.getAttribute("sivParentId");
          else
            this.sivParentId = null;

        }
        
        this.canDrop = function(event) {
          // accept only the registered drop flavour...
          if ( ! event.dataTransfer.mozGetDataAt(this.sivFlavour,0))
            return false;     
            
          if (event.dataTransfer.mozGetDataAt(this.sivFlavour,3) == "create")
            return true;
            
          if (event.dataTransfer.mozGetDataAt(this.sivFlavour,3) != "move")
            return false; 
            
          // it should not be possible to drag the element on to itself...
          if (this.isSameNode(event.dataTransfer.mozGetDataAt(this.sivFlavour,1)))
            return false;
          
          if (this.previousSibling)
            if (this.previousSibling.previousSibling)
              if (this.previousSibling.previousSibling.isSameNode(event.dataTransfer.mozGetDataAt(this.sivFlavour,1)))
                return false;
            
          
          // ... or onto a parent into his child block          
          for (var node = this; node; node = node.parentNode)
            if (node.isSameNode(event.dataTransfer.mozGetDataAt(this.sivFlavour,0)))
              return false;
          
          return true; 
        }
        
        this.moveElement = function(event) {
          var elm = dom.removeElement(
                      event.dataTransfer.mozGetDataAt(this.sivFlavour,2));
           
          if (!elm)
            throw "No Element found for "+event.dataTransfer.mozGetDataAt(this.sivFlavour,2); 
               
          // No Parent means delete element...
          if (this.sivParentId)
          {
            dom.addElement(this.sivParentId,elm,this.sivSiblingId);
                                    
            this.parentNode.insertBefore(
              event.dataTransfer.mozGetDataAt(this.sivFlavour,1)
              ,this).setAttribute("sivParentId",this.sivParentId);

            this.parentNode.insertBefore(
              event.dataTransfer.mozGetDataAt(this.sivFlavour,0)
              ,this);            
          }
          else
          {       
            // delete node...     
            event.dataTransfer.mozGetDataAt(this.sivFlavour,0).parentNode
              .removeChild(event.dataTransfer.mozGetDataAt(this.sivFlavour,0));
            
            event.dataTransfer.mozGetDataAt(this.sivFlavour,1).parentNode
              .removeChild(event.dataTransfer.mozGetDataAt(this.sivFlavour,1));
          }
        }
        
        this.createElement = function(event) {
          var elm = SieveLexer.createByName(
                      event.dataTransfer.mozGetDataAt(this.sivFlavour,1));
                      
          dom.addElement(this.sivParentId,elm,this.sivSiblingId);
          
          this.parentNode.insertBefore(
            createDropTarget(this.sivParentId),this);

          this.parentNode.insertBefore(
            elm.toElement(),this);          
        }
        

        
        this.init();
                    
        ]]>
      </constructor>
    </implementation>
      
    <handlers>
      <handler event="dragenter" phase="capturing">
      <![CDATA[
      
        this.init();
        
        if (! this.canDrop(event))
          return;
        
        this.setAttribute("sivDragging", "true");
      ]]>
      </handler>
      
      <handler event="dragexit" phase="capturing">
       <![CDATA[
       
        this.init();
        
        if (! this.canDrop(event))
          return;
          
        this.removeAttribute("sivDragging");
        
      ]]>
      </handler>
      
      <handler event="dragover" phase="capturing">
       <![CDATA[
       
        this.init();
        
        if (! this.canDrop(event))
          return;
          
        this.setAttribute("sivDragging", "true");
                  
        event.stopPropagation(); 
        event.preventDefault();
      ]]>
      </handler>
      
      <handler event="dragdrop" phase="capturing">
       <![CDATA[
       
        this.init();
          
        if (! this.canDrop(event))
          return;        
        
        this.removeAttribute("sivDragging");       
        
        switch (event.dataTransfer.mozGetDataAt(this.sivFlavour,3))
        {
          case "move" :
            this.moveElement(event);
            break;
            
          case "create" :
            this.createElement(event);
            break;
        }   

        // TODO hookup listener ...
           
        //event.stopPropagation();
      ]]>
      </handler>      
    </handlers>
  </binding>
  
  <binding id="SivDragBox">
    <content>
      <children/>
    </content>

    <implementation>
      <constructor>
        <![CDATA[
        
        this.init = function() {
          
          if (this.hasAttribute("sivAction"))
            this.sivAction = this.getAttribute("sivAction");
          else
            this.sivAction = "move";
        
          if (this.hasAttribute("sivAccepts"))
            this.sivFlavour = this.getAttribute("sivAccepts");
          else 
            this.sivFlavour = "sieve/action";
        
          if (this.hasAttribute("sivOwnerId"))
            this.sivOwnerId = this.getAttribute("sivOwnerId");
          else
            this.sivOwnerId = null;        
            
          if (this.hasAttribute("sivElmType"))
            this.sivElmType = this.getAttribute("sivElmType");
          else
            this.sivElmType = null;
        }
                
        this.init();
                    
        ]]>
      </constructor> 
    </implementation>    
    
    <handlers>
      <handler event="draggesture" phase="boubble">
       <![CDATA[
       
         this.init();
         
         with (event.dataTransfer)
         {
           switch (this.sivAction)
           {
             case "move" :
               mozSetDataAt(this.sivFlavour,this,0);
               mozSetDataAt(this.sivFlavour,this.previousSibling,1);
               mozSetDataAt(this.sivFlavour,this.sivOwnerId,2);
               mozSetDataAt(this.sivFlavour,"move",3);
               
               break;
               
             case "create" :
               mozSetDataAt(this.sivFlavour,this,0);
               mozSetDataAt(this.sivFlavour,this.sivElmType,1);
               mozSetDataAt(this.sivFlavour,"",2);
               mozSetDataAt(this.sivFlavour,"create",3);
               
               break;
             
             default :
               throw "Unknown Action..."
           }
           
           // TODO use this including the childs as drop image
         }
         
         event.stopPropagation();
         
       ]]>
       </handler>
    </handlers>
  </binding> 
  
</bindings>