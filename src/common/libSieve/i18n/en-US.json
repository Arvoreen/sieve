{
  "fileinto.tab.home" : "Fileinto",
  "fileinto.tab.help" : "Help",

  "fileinto.folder.label" : "Save the incoming message into folder:",
  "fileinto.folder.placeholder" : "Enter folder",
  "fileinto.folder.invalid" : "Invalid folder name",

  "fileinto.help.text" : "The mailbox name is typically a hierarchical name used to determine a folder on the server. So it is equivalent with the folder structure you can see in your mail client.\n\nThere is no precise definition how the hierarchical name is formed. It depends on your mail server implementation. Only the case-insensitive mailbox name INBOX is a special name reserved to mean \"the primary mailbox for this user on this server\".\n\nBut you should avoid using non-graphical characters, the list-wildcard characters (\"%\" and \"*\"), characters which are reserved by the server for the level of hierarchy (typically \"/\" or \".\") as well as \"#\" as \"&\" because they can have special meanings.",


  "exists.tab.home" : "Exists",
  "exists.tab.help" : "Help",

  "exists.header.label" :"All of the following header exist:",

  "exists.help.text":"",


  "header.tab.home" : "Header",
  "header.tab.advanced" : "Advanced",
  "header.tab.help" : "Help",

  "header.header": "Any of the following header ... ",
  "header.keywords": "... any of the keyword(s):",
  "header.help.text" : "Compares headers against constant strings.\n\nYou typically use this test with headers containing subject line or a spam score.\n\nDo not use this test, if the header should be matched against a mail addresses. The result will be unrealiable, as this test is not aware of display names. Use the address test instead.",


  "redirect.tab.home" : "Redirect",
  "redirect.tab.help" : "Help",

  "redirect.address.label" : "Forward email to:",
  "redirect.address.placeholder" : "Enter mail",
  "redirect.address.invalid" : "Invalid redirect address",

  "redirect.help" : "Redirect forwards the message to the given address. It makes no changes to the message body or existing headers, but it may add new headers.\n\n The envelope sender address on the outgoing message is chosen by the sieve implementation.\n\nImplementations may ignore a redirect action silently due to policy reasons.",


  "size.tab.home" : "Size",
  "size.tab.help" : "Help",

  "size.description" : "Check if message size is ... ",
  "size.larger" : "larger",
  "size.smaller" : "smaller",
  "size.compare" : "... than ...",

  "size.help" : "Compares the message size.\n\nTest the message size is greater or smaller than the given size. The size is measured in bytes, character encoding are ignored.\n\n",
  "size.help.warning" : "There is only a larger or smaller, no equals. A message with exactly 4000 bytes is neither larger nor smaller than 4000 bytes.",


  "duplicate.tab.home" :"Duplicate",
  "duplicate.tab.advanced" : "Advanced",
  "duplicate.tab.help" : "Help",

  "duplicate.unique.label" : "The unique id is...",

  "duplicate.tracking.title" : "Tracking Handles",
  "duplicate.tracking.text" :  "Duplicate tracking considers only messages which are tagged with the same handle. The rational is to have multiple tracking policies. In case no handle it provided the server will use a default one. A custom handle can be any unique strings.",
  "duplicate.tracking.default" : "Use default handle",
  "duplicate.tracking.custom" : "Custom Handle",

  "duplicate.expiration.title" : "Expiration",
  "duplicate.expiration.text" : "The server uses a duplicate message list to track duplicates. To keep this list small and fast, the list entries expire. After a list entry is expired it is no more considered as a Duplicate",
  "duplicate.expiration.default" : "Use server's default policy (usually 7 days)",
  "duplicate.expiration.custom.pre" : "Expire after",
  "duplicate.expiration.custom.post" : "seconds",

  "duplicate.time.text": "Expiration time uses either the point in time when the entry in the duplicate message list was created or the point in time when the duplicate message entry was last accessed.",
  "duplicate.time.created" : "The moment the entry was created",
  "duplicate.time.accessed" : "The timestamp of the most recent access",
  "duplicate.help" : "The main application for this test is handling duplicate deliveries commonly caused by mailing list subscriptions or redirected mail addresses.\n\n The detection is normally performed by matching the message ID to an internal list of message IDs from previously delivered messages.\n\n For more complex applications, the \"duplicate\" test can also use the content of a specific header field or other parts of the message.\n\nDuplicate deliveries are a common side effect of being subscribed to a mailing list. For example, if a member of the list decides to reply to both the user and the mailing list itself, the user will often get one copy of the message directly and another through the mailing list.",

  "addflag.tab.home" : "Add Flag",
  "addflag.tab.help" : "Help",
  "addflag.flags.title" : "Add the following IMAP Flags ...",
  "addflag.flags.text" : "It doesn't replace any previously set flags. This means that multiple occurrences of addflag are treated additively.",
  "addflag.help" : "Add flags to a message. It doesn't replace any previously set flags. This means that multiple occurrences of addflag are treated additively.\n\nMessage labels are called flags in the IMAP specification and are divided into two types: system flags and user-defined flags.\n\nSystem flags are defined in the IMAP Specification. They start with a leading backslash (\\). The current the following six system flags \\Seen, \\Answered, \\Flagged, \\Deleted, \\Draft, \\Recent are defined.\n\nUser-defined flags are also known as IMAP keywords and, as the name implies, are defined by IMAP users. There is a de facto standard that keywords which are in common use have names that begin with a dollar sign ($).\n\nExamples of common keywords are: $Label1, $Label2, $Label3, $Label4, $Label5. These keywords are typically hardwired to Important, Work, Personal, To Do and Later.\n\nIf you define your own personal keyword, its name should not begin with dollar sign ($) or backslash (\\) because otherwise it might collide with a flag that is used by current or future IMAP clients and servers",

  "hasflag.tab.home" : "Has Flag",
  "hasflag.tab.advanced" : "Advanced",
  "hasflag.tab.help" : "Help",
  "hasflag.flags.title" : "An imap flag... ",
  "hasflag.flags.keyword" : "... any of the keyword(s):",
  "hasflag.help" : "Message labels are called flags in the IMAP specification and are divided into two types: system flags and user-defined flags.\n\n  System flags are defined in the IMAP Specification. They start with a leading backslash (\\). The current the following six system flags \\Seen, \\Answered, \\Flagged, \\Deleted, \\Draft, \\Recent are defined.\n\nUser-defined flags are also known as IMAP keywords and, as the name implies, are defined by IMAP users. There is a de facto standard that keywords which are in common use have names that begin with a dollar sign ($).\n\n Examples of common keywords are: $Label1, $Label2, $Label3, Label4, $Label5. These keywords are typically hardwired to Important, Work, Personal, To Do and Later.\n\n If you define your own personal keyword, its name should not begin with dollar sign ($) or backslash (\\) because otherwise it might collide with a flag that is used by current or future IMAP clients and servers.",

  "removeflag.tab.home" : "Remove Flag",
  "removeflag.tab.help" : "Help",
  "removeflag.flags.title" : "Remove the following IMAP Flags ...",
  "removeflag.flags.text" : "Removeflag clears flags previously set by setflag or addflag",
  "removeflag.help" : "Removeflag clears flags previously set by \"setflag\" or \"addflag\". Calling removeflag with a flag that wasn't set before is not an error and is ignored. \n\nAdd flags to a message. It doesn't replace any previously set flags. This means that multiple occurrences of addflag are treated additively.\n\nMessage labels are called flags in the IMAP specification and are divided into two types: system flags and user-defined flags.\n\nSystem flags are defined in the IMAP Specification. They start with a leading backslash (\\). The current the following six system flags \\Seen , \\Answered, \\Flagged, \\Deleted, \\Draft, \\Recent are defined.\n\nUser-defined flags are also known as IMAP keywords and, as the name implies, are defined by IMAP users. There is a de facto standard that keywords which are in common use have names that begin with a dollar sign ($).\n\nExamples of common keywords are: $Label1, $Label2, $Label3, $Label4, $Label5. These keywords are typically hardwired to Important, Work, Personal, To Do and Later.\n\nIf you define your own personal keyword, its name should not begin with dollar sign ($) or backslash (\\) because otherwise it might collide with a flag that is used by current or future IMAP clients and servers",

  "setflags.tab.home" : "Set Flag",
  "setflags.tab.help" : "Help",
  "setflags.flags.title": "Set the following IMAP Flags ...",
  "setflags.flags.text": "It replaces any previously set flags.",
  "setflag.help":"Setflag is used for setting system flags, it replaces any previously set flags.\n\nMessage labels are called flags in the IMAP specification and are divided into two types: system flags and user-defined flags.\n\nSystem flags are defined in the IMAP Specification. They start with a leading backslash (\\). The current the following six system flags \\Seen , \\Answered, \\Flagged, \\Deleted, \\Draft, \\Recent are defined.\n\nUser-defined flags are also known as IMAP keywords and, as the name implies, are defined by IMAP users. There is a de facto standard that keywords which are in common use have names that begin with a dollar sign ($).\n\n Examples of common keywords are: $Label1, $Label2, $Label3, $Label4, $Label5. These keywords are typically hardwired to Important, Work, Personal, To Do and Later.\n\nIf you define your own personal keyword, its name should not begin with dollar sign ($) or backslash (\\) because otherwise it might collide with a flag that is used by current or future IMAP clients and servers",

  "flags.label" : "Add imap flag",
  "flags.text" : "Adds flags to a message. It doesn't replace any previously set flags.",

  "unique.default.title" : "... extracted from the header named message-id.",
  "unique.default.text" : "The message-id is assumed but not guaranteed to be globally unique.",

  "unique.header.title" : "... extracted from the header named:",
  "unique.header.text" : "Often mailinglist or ticket system use special headers to track duplicates.",

  "unique.id.title" : "... is provided:",
  "unique.id.text" : "Using a static string does not sound too usefull. But in combination with sieve variables, the string will get virtually dynamic. And you are able to create almost any unique id pattern to match against.",


  "bodyTransform.contentType" : "... the MIME parts that have the specified content types:",
  "bodyTransform.text" : "... the decoded message body. (Default)",
  "bodyTransform.raw" : "... the entire undecoded message body",

  "matchtype.is.title" : "... is ...",
  "matchtype.is.text" : "Only \"frobnitzm\" is \"frobnitzm\"",

  "matchtype.contains.title" : "... contains ...",
  "matchtype.contains.text" : "\"frobnitzm\" contains \"frob\" and \"nit\", but not \"fbm\"",

  "matchtype.matches.title" : "... matches ...",
  "matchtype.matches.text" : "\"*\" matches zero or more characters, and \"?\" matches a single character\n\"frobnitzm\" matches \"frob*zm\" or \"frobnit?m\" but not frob?m",

  "matchtype.value.title" : "... is",
  "matchtype.value.title2" : "...",
  "matchtype.value.greater" : "greater than",
  "matchtype.value.greaterEqual" : "greater than or equal",
  "matchtype.value.less" : "less than",
  "matchtype.value.lessEqual" : "less than or equal",
  "matchtype.value.equal" : "equal to",
  "matchtype.value.notEqual" : "not equal to",
  "matchtype.value.text" : "Compares the relation between strings. The test is considered true if any pair is true",

  "matchtype.regex.title" : "... regex matches ...",
  "matchtype.regex.text" : "Matches and compares using on a regular expression as defined in IEEE.1003-2.1992"
}
